<?xml version="1.0" encoding="UTF-8"?>
<language id="c" _name="C" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-c;text/x-csrc;image/x-xpixmap</property>
    <property name="globs">*.c</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>
  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="common-define"     _name="Common Define"         map-to="def:constant"/>
    <style id="included-file"     _name="Included File"         map-to="def:string"/>
    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="printf"            _name="printf Conversion"     map-to="def:special-char"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating Point Number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal Number"        map-to="def:decimal"/>
    <style id="octal"             _name="Octal Number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       _name="Hexadecimal Number"    map-to="def:base-n-integer"/>
    <style id="boolean"           _name="Boolean Value"         map-to="def:boolean"/>
    <style id="standard-stream"   _name="Standard Stream"       map-to="def:constant"/>
    <style id="signal"            _name="Signal"                map-to="def:constant"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
    <style id="function"          _name="Function"              map-to="def:function"/>
  </styles>

  <definitions>
    <define-regex id="preproc-start">^\s*#\s*</define-regex>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?]|    # escaped character
      [0-7]{1,3}|           # one, two, or three octal digits
      x[0-9A-Fa-f]+)        # 'x' followed by hex digits
    </define-regex>

    <!--contexts NOT used on the main context-->
    <!--TODO: what about scanf?-->
    <!--man 3 printf-->
    <context id="printf" style-ref="printf" extend-parent="false">
      <match extended="true">
        \%\%|\%
        (?:[1-9][0-9]*\$)?      # argument
        [#0\-\ \+\'I]*          # flags
        (?:[1-9][0-9]*|\*)?     # width
        (?:\.\-?(?:[0-9]+|\*))? # precision
        (?:hh|ll|[hlLqjzt])?    # length modifier
        [diouxXeEfFgGaAcsCSpnm] # conversion specifier
      </match>
    </context>

    <!--contexts used on the main context-->
    <!--Preprocessor-->
    <context id="if0-comment" style-ref="comment">
      <start>\%{preproc-start}if\b\s*0\b</start>
      <end>\%{preproc-start}(endif|else|elif)\b</end>
      <include>
        <context id="if-in-if0">
          <start>\%{preproc-start}if(n?def)?\b</start>
          <end>\%{preproc-start}endif\b</end>
          <include>
            <context ref="if-in-if0"/>
            <context ref="def:in-comment"/>
          </include>
        </context>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="include" style-ref="preprocessor">
      <match extended="true">
        \%{preproc-start}
        (include|import)\s*
        (".*?"|&lt;.*&gt;)
      </match>
      <include>
        <context id="included-file" sub-pattern="2" style-ref="included-file" class="path"/>
      </include>
    </context>

    <context id="preprocessor" style-ref="preprocessor"> <!-- end-at-line-end="true">-->
      <match extended="true">
        \%{preproc-start}
        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
        \b
      </match>
    </context>

    <context id="preprocessor-keyword" style-ref="preprocessor">
      <keyword>defined</keyword>
      <keyword>not defined</keyword>
    </context>
<!--
    <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
      <start extended="true">
        \%{preproc-start}
        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
        \b
      </start>
      <include>
        <context ref="def:line-continue" ignore-style="true"/>
        <context ref="string" ignore-style="true"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
      </include>
    </context>
-->
    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="printf"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char" class="string">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!--http://www.lysator.liu.se/c/ANSI-C-grammar-l.html-->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+|[0-9]+\.[0-9]*)([Ee][+-]?[0-9]*)?|
        ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-hexadecimal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]*[g-zG-Z][a-zA-Z0-9]*[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="octal" style-ref="octal">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-octal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]*[89][0-9]*[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (0|[1-9][0-9]*)[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="keyword" style-ref="keyword">
      <keyword>asm</keyword>
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>continue</keyword>
      <keyword>default</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>enum</keyword>
      <keyword>for</keyword>
      <keyword>fortran</keyword>
      <keyword>goto</keyword>
      <keyword>if</keyword>
      <keyword>return</keyword>
      <keyword>struct</keyword>
      <keyword>switch</keyword>
      <keyword>typedef</keyword>
      <keyword>union</keyword>
      <keyword>while</keyword>
    </context>

    <context id="operator" style-ref="operator">
      <keyword>_Alignof</keyword>
      <keyword>_Generic</keyword>
      <keyword>_Static_assert</keyword>
      <keyword>sizeof</keyword>
      <!--assert.h-->
      <keyword>static_assert</keyword>
      <!--stdalign.h-->
      <keyword>alignof</keyword>
      <!--stddef.h-->
      <keyword>offsetof</keyword>
    </context>

    <context id="type" style-ref="type">
      <keyword>_Bool</keyword>
      <keyword>_Complex</keyword>
      <keyword>_Imaginary</keyword>
      <keyword>char</keyword>
      <keyword>char(16|32)_t</keyword>
      <keyword>double</keyword>
      <keyword>float</keyword>
      <keyword>int</keyword>
      <keyword>(u)?int(_least|_fast)?(8|16|32|64)_t</keyword>
      <keyword>(u)?intmax_t</keyword>
      <keyword>(u)?intptr_t</keyword>
      <keyword>long</keyword>
      <keyword>ptrdiff_t</keyword>
      <keyword>off(64)?_t</keyword>
      <keyword>short</keyword>
      <keyword>signed</keyword>
      <keyword>size_t</keyword>
      <keyword>ssize_t</keyword>
      <keyword>time_t</keyword>
      <keyword>unsigned</keyword>
      <keyword>void</keyword>
      <keyword>wchar_t</keyword>
      <keyword>wint_t</keyword>
      <!--complex.h-->
      <keyword>complex</keyword>
      <keyword>imaginary</keyword>
      <!--stdbool.h-->
      <keyword>bool</keyword>
    </context>

    <context id="storage-class" style-ref="type">
      <keyword>(_A|a)lignas</keyword>
      <keyword>_Atomic</keyword>
      <keyword>(_N|n)oreturn</keyword>
      <keyword>(_T|t)hread_local</keyword>
      <keyword>auto</keyword>
      <keyword>const</keyword>
      <keyword>extern</keyword>
      <keyword>inline</keyword>
      <keyword>register</keyword>
      <keyword>restrict</keyword>
      <keyword>static</keyword>
      <keyword>volatile</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <!--stdbool.h-->
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <context id="common-define" style-ref="common-define">
      <!--complex.h-->
      <keyword>I</keyword>
      <!--stddef.h-->
      <keyword>NULL</keyword>
      <!--stdint.h-->
      <keyword>SIZE_MAX</keyword>
      <keyword>MAX</keyword>
      <keyword>MIN</keyword>
      <keyword>EOF</keyword>
      <keyword>EXIT_SUCCESS</keyword>
      <keyword>EXIT_FAILURE</keyword>
      <keyword>RAND_MAX</keyword>
      <keyword>CHAR_MAX</keyword>
      <keyword>CHAR_MIN</keyword>
      <keyword>SHRT_MAX</keyword>
      <keyword>SHRT_MIN</keyword>
      <keyword>INT_MAX</keyword>
      <keyword>INT_MIN</keyword>
      <keyword>LONG_MAX</keyword>
      <keyword>LONG_MIN</keyword>
      <keyword>LLONG_MAX</keyword>
      <keyword>LLONG_MIN</keyword>
      <keyword>FLT_MAX</keyword>
      <keyword>FLT_MIN</keyword>
      <keyword>DBL_MAX</keyword>
      <keyword>DBL_MIN</keyword>
      <keyword>LDBL_MAX</keyword>
      <keyword>LDBL_MIN</keyword>
      <keyword>__LINE__</keyword>
      <keyword>__DATA__</keyword>
      <keyword>__FILE__</keyword>
      <keyword>__func__</keyword>
      <keyword>__TIME__</keyword>
      <keyword>__STDC__</keyword>
    </context>

    <context id="standard-stream" style-ref="standard-stream">
      <keyword>stdin</keyword>
      <keyword>stdout</keyword>
      <keyword>stderr</keyword>
    </context>

    <context id="signal" style-ref="signal">
      <keyword>SIGABRT</keyword>
      <keyword>SIGALRM</keyword>
      <keyword>SIGCHLD</keyword>
      <keyword>SIGCONT</keyword>
      <keyword>SIGFPE</keyword>
      <keyword>SIGHUP</keyword>
      <keyword>SIGILL</keyword>
      <keyword>SIGINT</keyword>
      <keyword>SIGKILL</keyword>
      <keyword>SIGPIPE</keyword>
      <keyword>SIGQUIT</keyword>
      <keyword>SIGSEGV</keyword>
      <keyword>SIGSTOP</keyword>
      <keyword>SIGTERM</keyword>
      <keyword>SIGTRAP</keyword>
      <keyword>SIGTSTP</keyword>
      <keyword>SIGTTIN</keyword>
      <keyword>SIGTTOU</keyword>
      <keyword>SIGUSR1</keyword>
      <keyword>SIGUSR2</keyword>
    </context>

    <!--Standard Functions-->
    <context id="function" style-ref="function">
      <suffix>(?=\ ?\()</suffix>
      <keyword>main</keyword>
      <!--complex.h-->
      <keyword>creal(f|l)?</keyword>
      <keyword>cimag(f|l)?</keyword>
      <!--stdio.h-->
      <keyword>getchar</keyword>
      <keyword>gets</keyword>
      <keyword>putchar</keyword>
      <keyword>puts</keyword>
      <keyword>printf</keyword>
      <keyword>fprintf</keyword>
      <keyword>scanf</keyword>
      <keyword>fscanf</keyword>
      <!--stdlib.h-->
      <keyword>atof</keyword>
      <keyword>atoi</keyword>
      <keyword>atol</keyword>
      <keyword>exit</keyword>
      <keyword>rand</keyword>
      <keyword>srand</keyword>
      <!--string.h-->
      <keyword>strcat</keyword>
      <keyword>strchr</keyword>
      <keyword>strcmp</keyword>
      <keyword>strcoll</keyword>
      <keyword>strcpy</keyword>
      <keyword>strcspn</keyword>
      <keyword>strerror</keyword>
      <keyword>strlen</keyword>
      <keyword>strtok</keyword>
      <!--time.h-->
      <keyword>ctime</keyword>
      <keyword>time</keyword>
    </context>

    <!--Main context-->
    <context id="c">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="def:c-like-comment" style-ref="comment"/>
        <context ref="def:c-like-comment-multiline" style-ref="comment"/>
        <context ref="def:c-like-close-comment-outside-comment" style-ref="comment"/>
        <context ref="if0-comment"/>
        <context ref="include"/>
        <context ref="preprocessor"/>
        <context ref="preprocessor-keyword"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="invalid-hexadecimal"/>
        <context ref="octal"/>
        <context ref="invalid-octal"/>
        <context ref="decimal"/>
        <context ref="keyword"/>
        <context ref="operator"/>
        <context ref="type"/>
        <context ref="storage-class"/>
        <context ref="boolean"/>
        <context ref="common-define"/>
        <context ref="standard-stream"/>
        <context ref="signal"/>
        <context ref="function"/>
      </include>
    </context>
  </definitions>
</language>
